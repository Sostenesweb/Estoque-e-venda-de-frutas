import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

// ========================= CAMADA DE MODELO =========================
abstract class Produto {
    protected String nome;
    protected double preco;
    protected int estoque;

    public Produto(String nome, double preco, int estoque) {
        this.nome = nome;
        this.preco = preco;
        this.estoque = estoque;
    }

    public String getNome() { return nome; }
    public double getPreco() { return preco; }
    public int getEstoque() { return estoque; }

    public void setEstoque(int estoque) { this.estoque = estoque; }

    public abstract void exibirDetalhes();
}

class Fruta extends Produto {
    private String cor;
    private int vendidos;

    public Fruta(String nome, String cor, double preco, int estoque) {
        super(nome, preco, estoque);
        this.cor = cor;
        this.vendidos = 0;
    }

    public String getCor() { return cor; }
    public int getVendidos() { return vendidos; }

    public void vender(int quantidade) {
        if (estoque >= quantidade) {
            estoque -= quantidade;
            vendidos += quantidade;
            System.out.println(quantidade + " " + nome + "(s) vendidos com sucesso.");
        } else {
            System.out.println("Estoque insuficiente de " + nome + ".");
        }
    }

    @Override
    public void exibirDetalhes() {
        System.out.println("Nome: " + nome + ", Cor: " + cor + ", Preço: " + preco + 
                           ", Estoque: " + estoque + ", Vendidos: " + vendidos);
    }
}

// ========================= CAMADA DE REPOSITÓRIO =========================
interface Repositorio<T> {
    void adicionar(T objeto);
    void remover(String nome);
    T buscar(String nome);
    List<T> listar();
}

class FrutaRepositorio implements Repositorio<Fruta> {
    private List<Fruta> frutas = new ArrayList<>();

    @Override
    public void adicionar(Fruta fruta) {
        frutas.add(fruta);
    }

    @Override
    public void remover(String nome) {
        frutas.removeIf(fruta -> fruta.getNome().equalsIgnoreCase(nome));
    }

    @Override
    public Fruta buscar(String nome) {
        for (Fruta fruta : frutas) {
            if (fruta.getNome().equalsIgnoreCase(nome)) {
                return fruta;
            }
        }
        return null;
    }

    @Override
    public List<Fruta> listar() {
        return frutas;
    }
}

// ========================= CAMADA DE SERVIÇO =========================
interface FrutaServico {
    void cadastrarFruta(String nome, String cor, double preco, int estoque);
    void venderFruta(String nome, int quantidade);
    void listarFrutas();
    void removerFruta(String nome);
}

class FrutaServicoImpl implements FrutaServico {
    private FrutaRepositorio repositorio;

    public FrutaServicoImpl(FrutaRepositorio repositorio) {
        this.repositorio = repositorio;
    }

    @Override
    public void cadastrarFruta(String nome, String cor, double preco, int estoque) {
        Fruta fruta = new Fruta(nome, cor, preco, estoque);
        repositorio.adicionar(fruta);
    }

    @Override
    public void venderFruta(String nome, int quantidade) {
        Fruta fruta = repositorio.buscar(nome);
        if (fruta != null) {
            fruta.vender(quantidade);
        } else {
            System.out.println("Fruta não encontrada.");
        }
    }

    @Override
    public void listarFrutas() {
        for (Fruta fruta : repositorio.listar()) {
            fruta.exibirDetalhes();
        }
    }

    @Override
    public void removerFruta(String nome) {
        repositorio.remover(nome);
        System.out.println("Fruta " + nome + " removida.");
    }
}

// ========================= CAMADA DE INTERFACE (MAIN) =========================
public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        FrutaRepositorio repositorio = new FrutaRepositorio();
        FrutaServico servico = new FrutaServicoImpl(repositorio);

        while (true) {
            System.out.println("\nMenu:");
            System.out.println("1. Cadastrar Fruta");
            System.out.println("2. Vender Fruta");
            System.out.println("3. Listar Frutas");
            System.out.println("4. Remover Fruta");
            System.out.println("5. Sair");
            System.out.print("Escolha uma opção: ");
            
            int opcao = scanner.nextInt();
            scanner.nextLine(); // Limpar buffer

            switch (opcao) {
                case 1:
                    System.out.print("Nome: ");
                    String nome = scanner.nextLine();
                    System.out.print("Cor: ");
                    String cor = scanner.nextLine();
                    System.out.print("Preço: ");
                    double preco = scanner.nextDouble();
                    System.out.print("Estoque: ");
                    int estoque = scanner.nextInt();
                    servico.cadastrarFruta(nome, cor, preco, estoque);
                    break;
                case 2:
                    System.out.print("Nome da fruta: ");
                    String nomeVenda = scanner.nextLine();
                    System.out.print("Quantidade: ");
                    int quantidade = scanner.nextInt();
                    servico.venderFruta(nomeVenda, quantidade);
                    break;
                case 3:
                    servico.listarFrutas();
                    break;
                case 4:
                    System.out.print("Nome da fruta a remover: ");
                    String nomeRemover = scanner.nextLine();
                    servico.removerFruta(nomeRemover);
                    break;
                case 5:
                    System.out.println("Saindo...");
                    scanner.close();
                    return;
                default:
                    System.out.println("Opção inválida.");
            }
        }
    }
}
